//Типы плат часов
#if (BOARD_TYPE == 0) //IN-12 (индикаторы стоят правильно)
volatile uint8_t* anodePort[] = {&DOT_PORT, &ANODE_1_PORT, &ANODE_2_PORT, &ANODE_3_PORT, &ANODE_4_PORT, ANODE_OFF, ANODE_OFF}; //таблица портов анодов ламп
const uint8_t anodeBit[] = {0x01 << DOT_BIT, 0x01 << ANODE_1_BIT, 0x01 << ANODE_2_BIT, 0x01 << ANODE_3_BIT, 0x01 << ANODE_4_BIT, ANODE_OFF, ANODE_OFF}; //таблица бит анодов ламп
const uint8_t digitMask[] = {7, 3, 6, 4, 1, 9, 8, 0, 5, 2, 10};   //маска дешифратора платы in12 (цифры нормальные)(цифра "10" - это пустой символ, должен быть всегда в конце)
const uint8_t cathodeMask[] = {1, 6, 2, 7, 5, 0, 4, 9, 8, 3};     //порядок катодов in12
#elif (BOARD_TYPE == 1) //IN-12 turned (индикаторы перевёрнуты)
volatile uint8_t* anodePort[] = {&DOT_PORT, &ANODE_4_PORT, &ANODE_3_PORT, &ANODE_2_PORT, &ANODE_1_PORT, ANODE_OFF, ANODE_OFF}; //таблица портов анодов ламп
const uint8_t anodeBit[] = {0x01 << DOT_BIT, 0x01 << ANODE_4_BIT, 0x01 << ANODE_3_BIT, 0x01 << ANODE_2_BIT, 0x01 << ANODE_1_BIT, ANODE_OFF, ANODE_OFF}; //таблица бит анодов ламп
const uint8_t digitMask[] = {2, 8, 1, 9, 6, 4, 3, 5, 0, 7, 10};   //маска дешифратора платы in12 turned (цифры вверх ногами)(цифра "10" - это пустой символ, должен быть всегда в конце)
const uint8_t cathodeMask[] = {1, 6, 2, 7, 5, 0, 4, 9, 8, 3};     //порядок катодов in12
#elif (BOARD_TYPE == 2) //IN-14 (обычная и neon dot)
volatile uint8_t* anodePort[] = {&DOT_PORT, &ANODE_4_PORT, &ANODE_3_PORT, &ANODE_2_PORT, &ANODE_1_PORT, ANODE_OFF, ANODE_OFF}; //таблица портов анодов ламп
const uint8_t anodeBit[] = {0x01 << DOT_BIT, 0x01 << ANODE_4_BIT, 0x01 << ANODE_3_BIT, 0x01 << ANODE_2_BIT, 0x01 << ANODE_1_BIT, ANODE_OFF, ANODE_OFF}; //таблица бит анодов ламп
const uint8_t digitMask[] = {9, 8, 0, 5, 4, 7, 3, 6, 2, 1, 10};   //маска дешифратора платы in14(цифра "10" - это пустой символ, должен быть всегда в конце)
const uint8_t cathodeMask[] = {1, 0, 2, 9, 3, 8, 4, 7, 5, 6};     //порядок катодов in14
#elif (BOARD_TYPE == 3) //другие индикаторы(4 лампы)
volatile uint8_t* anodePort[] = {&DOT_PORT, &ANODE_1_PORT, &ANODE_2_PORT, &ANODE_3_PORT, &ANODE_4_PORT, ANODE_OFF, ANODE_OFF}; //таблица портов анодов ламп
const uint8_t anodeBit[] = {0x01 << DOT_BIT, 0x01 << ANODE_1_BIT, 0x01 << ANODE_2_BIT, 0x01 << ANODE_3_BIT, 0x01 << ANODE_4_BIT, ANODE_OFF, ANODE_OFF}; //таблица бит анодов ламп
const uint8_t digitMask[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};   //тут вводим свой порядок пинов лампы(цифра "10" - это пустой символ, должен быть всегда в конце)
const uint8_t cathodeMask[] = {1, 6, 2, 7, 5, 0, 4, 9, 8, 3};     //порядок катодов in12
#elif (BOARD_TYPE == 4) //другие индикаторы(6 ламп)
volatile uint8_t* anodePort[] = {&DOT_PORT, &ANODE_1_PORT, &ANODE_2_PORT, &ANODE_3_PORT, &ANODE_4_PORT, &ANODE_5_PORT, &ANODE_6_PORT}; //таблица портов анодов ламп
const uint8_t anodeBit[] = {0x01 << DOT_BIT, 0x01 << ANODE_1_BIT, 0x01 << ANODE_2_BIT, 0x01 << ANODE_3_BIT, 0x01 << ANODE_4_BIT, 0x01 << ANODE_5_BIT, 0x01 << ANODE_6_BIT}; //таблица бит анодов ламп
const uint8_t digitMask[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};   //тут вводим свой порядок пинов лампы(цифра "10" - это пустой символ, должен быть всегда в конце)
const uint8_t cathodeMask[] = {1, 0, 2, 9, 3, 8, 4, 7, 5, 6};     //порядок катодов in14
#endif

//Работа со звуками
#define SOUND_PATTERN(ptr) {(uint16_t)&ptr, sizeof(ptr)} //маска для массива мелодий
#define SOUND_LINK(link) (uint16_t)&link //ссылка на массив мелодии
#define SOUND_MAX(arr) (sizeof(arr) >> 2) //максимальное количество мелодий в массиве

//Мелодии будильника
const uint16_t _alarm_1[][3] PROGMEM = { //массив семплов 1-й мелодии будильника || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {2000, 500, 1000}
};
const uint16_t _alarm_2[][3] PROGMEM = { //массив семплов 2-й мелодии будильника || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {2000, 100, 170}, {2000, 100, 170}, {2000, 100, 500}
};
const uint16_t _alarm_3[][3] PROGMEM = { //массив семплов 3-й мелодии будильника || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {2000, 250, 250}, {1500, 250, 350}, {2000, 250, 250}, {1500, 250, 350},
  {2000, 250, 250}, {1500, 250, 350}, {2000, 250, 250}, {1500, 250, 750}
};
const uint16_t _alarm_4[][3] PROGMEM = { //массив семплов 4-й мелодии будильника || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {392, 700, 700}, {392, 700, 700}, {392, 700, 700}, {311, 500, 500},
  {466, 200, 200}, {392, 700, 700}, {311, 500, 500}, {466, 200, 200},
  {392, 1400, 1400}, {587, 700, 700}, {587, 700, 700}, {587, 700, 700},
  {622, 500, 500}, {466, 200, 200}, {369, 700, 700}, {311, 500, 500},
  {466, 200, 200}, {392, 1400, 1400}, {784, 700, 700}, {392, 500, 500},
  {392, 200, 200}, {784, 700, 700}, {739, 500, 500}, {698, 200, 200},
  {659, 200, 200}, {622, 200, 200}, {659, 900, 900}, {415, 300, 300},
  {554, 700, 700}, {523, 500, 500}, {493, 200, 200}, {466, 200, 200},
  {440, 200, 200}, {466, 900, 900}, {311, 300, 300}, {369, 700, 700},
  {311, 500, 500}, {466, 200, 200}, {392, 1500, 2500}
};

//Массив мелодий будильника
const uint16_t alarm_sound[][2] PROGMEM = {
  SOUND_PATTERN(_alarm_1),
  SOUND_PATTERN(_alarm_2),
  SOUND_PATTERN(_alarm_3),
  SOUND_PATTERN(_alarm_4)
};


//Звуки ошибок
const uint16_t _error_1[][3] PROGMEM = { //массив семплов || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {2000, 200, 400}, {2000, 200, 400}, {2000, 200, 400}
};
const uint16_t _error_2[][3] PROGMEM = { //массив семплов || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {2000, 600, 800}, {2000, 200, 400}, {2000, 200, 400}
};
const uint16_t _error_3[][3] PROGMEM = { //массив семплов || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {2000, 200, 400}, {2000, 600, 800}, {2000, 200, 400}
};
const uint16_t _error_4[][3] PROGMEM = { //массив семплов || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {2000, 600, 800}, {2000, 600, 800}, {2000, 200, 400}
};
const uint16_t _error_5[][3] PROGMEM = { //массив семплов || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {2000, 200, 400}, {2000, 200, 400}, {2000, 600, 800}
};
const uint16_t _error_6[][3] PROGMEM = { //массив семплов || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {2000, 600, 800}, {2000, 200, 400}, {2000, 600, 800}
};
const uint16_t _error_7[][3] PROGMEM = { //массив семплов || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {2000, 200, 400}, {2000, 600, 800}, {2000, 600, 800}
};
const uint16_t _error_8[][3] PROGMEM = { //массив семплов || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {2000, 600, 800}, {2000, 600, 800}, {2000, 600, 800}
};

//Массив мелодий ошибок
const uint16_t error_sound[][2] PROGMEM = {
  SOUND_PATTERN(_error_1),
  SOUND_PATTERN(_error_2),
  SOUND_PATTERN(_error_3),
  SOUND_PATTERN(_error_4),
  SOUND_PATTERN(_error_5),
  SOUND_PATTERN(_error_6),
  SOUND_PATTERN(_error_7),
  SOUND_PATTERN(_error_8)
};


//Основные звуки
const uint16_t _pass_error[][3] PROGMEM = { //массив семплов || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {500, 500, 600}, {500, 500, 600}
};
const uint16_t _reset_settings[][3] PROGMEM = { //массив семплов || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {1500, 500, 600}, {1000, 500, 600}, {500, 500, 600}
};
const uint16_t _alarm_disable[][3] PROGMEM = { //массив семплов || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {1000, 200, 210}, {500, 200, 210}
};
const uint16_t _alarm_waint[][3] PROGMEM = { //массив семплов || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {1500, 100, 200}, {1500, 100, 200}, {1500, 100, 200}
};
const uint16_t _hour_sound[][3] PROGMEM = { //массив семплов || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {800, 225, 225}, {500, 300, 300}, {600, 250, 250}, {400, 350, 350}
};
const uint16_t _timer_warn[][3] PROGMEM = { //массив семплов || {семпл - частота(10..10000)(Hz), | длительность звука(4..10000)(ms), | длительность семпла(4..10000)(ms)}
  {1500, 300, 350}, {1000, 300, 350}, {1500, 300, 350}, {1000, 300, 1500}
};

//Массив основных мелодий
const uint16_t general_sound[][2] PROGMEM = {
  SOUND_PATTERN(_pass_error),
  SOUND_PATTERN(_reset_settings),
  SOUND_PATTERN(_alarm_disable),
  SOUND_PATTERN(_alarm_waint),
  SOUND_PATTERN(_timer_warn),
  SOUND_PATTERN(_hour_sound)
};


//Настройки радиоприемника
#define RADIO_STATIONS 877, 1025, 1057 //радиостанции(не более 9 пресетов)(870..1080)(МГц * 10)
#define RADIO_UPDATE_TIME 500        //время обновления информации в режиме радио(100..1000)(мс)
#define RADIO_TIMEOUT 50             //тайм-аут выхода из радио по бездействию(5..60)(сек)

//Настройки синхронизации времени
#define RTC_SYNC_TIME 15             //период попытки синхронизации с модулем реального времени при отсутствии сигнала SQW(1..30)(м)
#define RTC_SYNC_PHASE 25            //фаза попытки синхронизации с модулем реального времени при отсутствии сигнала SQW(15..45)(с)

//Настройки проверки сигнала SQW
#define TEST_SQW_TIME 2000           //время проверки сигнала с пина SQW(1500..5000)(мс)
#define MIN_SQW_TIME 650             //минимальное время сигнала с пина SQW(500..1000)(мс)
#define MAX_SQW_TIME 2000            //максимальное время сигнала с пина SQW(1500..3000)(мс)

//Настройки ошибок
#define ERROR_SHOW_TIME 3000         //время отображения ошибки(1000...5000)(мс)

//Настройки отладки
#define DEBUG_PASS 0                 //пароль для входа в отладку(0..9999)
#define DEBUG_PASS_ATTEMPTS 3        //количество попыток ввода пароля для входа в отладку(0..10)
#define DEBUG_PASS_BLINK_TIME 500    //период мигания активного разряда пароля(100..1000)(мс)

#define DEBUG_TIMEOUT 30             //тайм-аут выхода из ввода пароля отладки по бездействию(5..60)(сек)

//Настройки основных настроек
#define SETTINGS_TIMEOUT 30          //тайм-аут выхода из настроек по бездействию(5..60)(сек)
#define SETTINGS_BLINK_TIME 500      //период мигания активного пункта настроек(100..1000)(мс)

//Настройки быстрого меню
#define FAST_ANIM_TIME 150           //время анимации быстрого меню(2..65500)(мс)

#define FAST_BACKL_TIME 3000         //время отображения настройки режима подсветки(1000..5000)(мс)
#define FAST_FLIP_TIME 1500          //время отображения настройки перелистывания цифр(1000..5000)(мс)
#define FAST_DOT_TIME 1500           //время отображения настройки режима точек(1000..5000)(мс)

//Настройки режима тестирования
#define TEST_LAMP_TIME 500           //время проверки горения цифры в режиме тестирования(500..5000)(мс)
#define TEST_BACKL_REVERSE 0         //реверс порядка проверки светодиодов в режиме тестирования(0 - нормальное отображение | 1 - реверсивное отображение)
#define TEST_FREQ_STEP 500           //шаг перебора частот для теста бузера(100..1000)(Гц)

//Настройки обновления температуры
#define TEMP_UPDATE_TIME 2000        //таймаут обновления температуры(2000..5000)(мс)

//Настройки опроса ацп
#define CYCLE_HV_CHECK 10            //количество циклов опроса ацп обратной связи ВВ преобразователя(1..15)
#define CYCLE_VCC_CHECK 10           //количество циклов опроса ацп напряжения питания(1..15)

//Настройки динамической индикации
#define INDI_FREQ_ADG 70             //частота динамической индикации(4 лампы - (50..100) | 6 ламп - (40..70))(гц)
#define INDI_DEAD_TIME 30            //период тишины для закрытия оптопар(0..50)

//Настройки напряжения
#define REFERENCE 1.1                //опорное напряжение(1.0..1.2)(в)
#define MAX_VCC 5.5                  //максимальное напряжение питания(4.0..5.5)(в)
#define MIN_VCC 4.5                  //минимальное напряжение питания(4.0..5.5)(в)

//Настройки кнопок
#define BTN_GIST_TIME 50             //время для защиты от дребезга(0..250)(мс)
#define BTN_HOLD_TIME 550            //время после которого считается что кнопка зажата(0..5000)(мс)

#define BTN_ANALOG_GIST 25           //гистерезис значения ацп кнопок(5..50)

//Настройки памяти
#define EEPROM_BLOCK_NULL 0          //начальный блок памяти(0..511)
#define EEPROM_BLOCK_MAX 1023        //максимальная ячейка памяти(1023)
